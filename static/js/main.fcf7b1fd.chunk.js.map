{"version":3,"sources":["resize1.1-6.jpg","homeimage.jpg","logo.svg","jumbotron.js","gridlist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","london1","Jumbotron","fluid","className","classname","Container","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","tileData","img","shanghai","title","cols","ImageGridList","classes","GridList","cellHeight","cellWidth","map","tile","GridListTile","key","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,gjBCK3C,IAAMC,EAASC,IAAOC,IAAV,IAEMC,KAsBLC,EAAY,kBACvB,kBAACJ,EAAD,KACA,kBAAC,IAAD,CAAOK,OAAK,EAACC,UAAU,SACvB,yBAAKC,UAAU,YACf,kBAACC,EAAA,EAAD,KACA,yD,yCC1BIC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,MAAO,KACPC,OAAQ,SAuBLC,EAAW,CACf,CACEC,IAAKC,IACFC,MAAO,QACVC,KAAM,GAGR,CACEH,IAAKC,IACFC,MAAO,MACVC,KAAM,GAGR,CACEH,IAAKC,IACFC,MAAO,qBACVC,KAAM,IAoBIC,MAff,WACE,IAAMC,EAAUrB,IAEhB,OACE,yBAAKH,UAAWwB,EAAQlB,MACtB,kBAACmB,EAAA,EAAD,CAAUC,WAAY,IAAKC,UAAW,IAAM3B,UAAWwB,EAAQT,SAAUO,KAAM,GAC5EJ,EAASU,KAAI,SAACC,GAAD,OACZ,kBAACC,EAAA,EAAD,CAAcC,IAAKF,EAAKV,IAAKG,KAAMO,EAAKP,MAAQ,GAC9C,yBAAKU,IAAKH,EAAKV,IAAKc,IAAKJ,EAAKR,eC7C3Ba,MAlBf,WACE,OACE,yBAAKlC,UAAU,OACb,4BAAQA,UAAU,cAIxB,kBAAE,EAAF,MAIA,kBAAC,EAAD,MACE,4D,MCPkBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fcf7b1fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resize1.1-6.9460e9c9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/homeimage.8b8f3754.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {Jumbotron as Jumbo, Container} from 'react-bootstrap';\nimport styled from 'styled-components';\nimport london1 from './homeimage.jpg';\n\nconst Styles = styled.div`\n.Jumbo {\nbackground: url(${london1}) no-repeat fixed bottom;\nbackground-size: cover;\ncolor: #F0F8FF;\nheight: 440px;\nposition: relative;\nz-index: 0;\n}\n\n.overlay {\n  background-colour:#000;\n  opacity: 0.6;\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom:0;\n  right:0;\n  z-index: -1;\n  object-fit: cover;\n\n}\n`\n\nexport const Jumbotron = () => (\n  <Styles>\n  <Jumbo fluid className=\"Jumbo\">\n  <div classname=\"overlay\"></div>\n  <Container>\n  <h1> McConkey Architects </h1>\n\n    </Container>\n    </Jumbo>\n    </Styles>\n)\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport shanghai from './resize1.1-6.jpg'\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 1500,\n    height: 400,\n  },\n}));\n\n/**\n * The example data is structured as follows:\n *\n * import image from 'path/to/image.jpg';\n * [etc...]\n *\n * const tileData = [\n *   {\n *     img: image,\n *     title: 'Image',\n *     author: 'author',\n *     cols: 2,\n *   },\n *   {\n *     [etc...]\n *   },\n * ];\n */\n\n const tileData = [\n   {\n     img: shanghai,\n        title: 'paris',\n     cols: 1,\n\n   },\n   {\n     img: shanghai,\n        title: 'nyc',\n     cols: 1,\n\n   },\n   {\n     img: shanghai,\n        title: 'st pancras station',\n     cols: 1,\n\n   },\n\n ]\nfunction ImageGridList() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={360} cellWidth={1000} className={classes.gridList} cols={3}>\n        {tileData.map((tile) => (\n          <GridListTile key={tile.img} cols={tile.cols || 2}>\n            <img src={tile.img} alt={tile.title} />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\nexport default ImageGridList\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Jumbotron} from './jumbotron'\nimport ImageGridList from './gridlist'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n\n\n< Jumbotron />\n\n\n\n<ImageGridList />\n  <h1> Site under construction </h1>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Nav, Navbar, NavDropdown} from 'react-bootstrap'\n\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Route, Link } from 'react-router-dom'\n\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}